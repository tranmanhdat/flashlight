FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04 AS cuda_base_builder
ENV APT_INSTALL="apt-get install -y --no-install-recommends"
ENV DEBIAN_FRONTEND=noninteractive
RUN rm -rf /var/lib/apt/lists/* \
           /etc/apt/sources.list.d/cuda.list \
           /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-get update && DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    build-essential \
    ca-certificates \
    wget \
    git \
    g++ \
    cmake \
    # for MKL
    gpg-agent \
    # for kenlm
    libboost-thread-dev libboost-test-dev libboost-system-dev libboost-program-options-dev libeigen3-dev zlib1g-dev libbz2-dev liblzma-dev \
    # for arrayfire
    libboost-stacktrace-dev \
    # FFTW
    libfftw3-dev \
    # ssh for OpenMPI
    openssh-server openssh-client \
    # for OpenMPI
    libopenmpi-dev openmpi-bin

RUN apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/*

FROM cuda_base_builder AS cuda_arrayfire
RUN cd /tmp && \
    git clone --branch v3.8.3 --depth 1 --recursive --shallow-submodules https://github.com/arrayfire/arrayfire.git && \
    mkdir -p arrayfire/build && cd arrayfire/build && \
    CXXFLAGS=-DOS_LNX cmake .. -DCMAKE_BUILD_TYPE=Release \
                               -DCMAKE_INSTALL_PREFIX=/opt/arrayfire \
                               -DAF_BUILD_CUDA=ON \
                               -DAF_BUILD_CPU=OFF \
                               -DAF_BUILD_OPENCL=OFF \
                               -DAF_BUILD_EXAMPLES=OFF \
                               -DAF_WITH_IMAGEIO=OFF \
                               -DBUILD_TESTING=OFF \
                               -DAF_BUILD_DOCS=OFF && \
    make install -j$(nproc)

FROM cuda_base_builder AS cuda_kenlm
RUN cd /tmp && git clone https://github.com/kpu/kenlm.git && \
    cd kenlm && git checkout 9af679c38477b564c26917a5dcf52d2c86177fb9 && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_INSTALL_PREFIX=/opt/kenlm \
             -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \
    make install -j$(nproc)

FROM cuda_base_builder AS cuda_finall
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        vim \
        emacs \
        nano \
        htop \
        # nccl: for flashlight
        libnccl2 libnccl-dev \
        # libsndfile
        libsndfile1-dev \
        # for Intel's Math Kernel Library (MKL)
        cpio \
        # gflags
        libgflags-dev libgflags2.2 \
        # for glog
        libgoogle-glog-dev libgoogle-glog0v5 \
        # python sox
        sox libsox-dev python3-dev python3-pip python3-distutils && \
        # python (for bindings and preprocessing)
        python3 -m pip --no-cache-dir install numpy typing-extensions && \
        python3 -m pip --no-cache-dir install --upgrade setuptools sox tqdm 

RUN apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/*

RUN cd /tmp && wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor > /usr/share/keyrings/oneapi-archive-keyring.gpg && \
    sh -c 'echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list' && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    intel-oneapi-mkl intel-oneapi-mkl-devel intel-oneapi-dnnl-devel intel-oneapi-base-toolkit \
    intel-deep-learning-essentials 

RUN apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/*

COPY --from=cuda_arrayfire  /opt/arrayfire  /opt/arrayfire
COPY --from=cuda_kenlm      /opt/kenlm      /opt/kenlm
    
ENV KENLM_ROOT=/opt/kenlm

ENV MKLROOT="/opt/intel/mkl"
RUN ln -s /opt/intel/oneapi/mkl/latest /opt/intel/mkl

#TO-DO: add libfmt-dev in the first stage
# install libfmt-dev # actually it should be installed in first stage, but use cache now 
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
    libfmt-dev && \
    apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/*

# RUN mkdir /root/flashlight
# COPY . /root/flashlight

# # build oneDNN
# RUN cd /tmp && \
#     git clone https://github.com/uxlfoundation/oneDNN.git
# RUN cd /tmp/oneDNN && \
#     mkdir build && cd build && \
#     cmake .. -DCMAKE_BUILD_TYPE=Release \
#              -DCMAKE_INSTALL_PREFIX=/opt/oneDNN \
#              -DDNNL_CPU_RUNTIME=OMP \
#              -DDNNL_GPU_RUNTIME=NONE \
#              -DDNNL_BUILD_EXAMPLES=OFF \
#              -DDNNL_BUILD_TESTS=OFF && \
#     make install -j$(nproc)
# RUN cd /root/flashlight && mkdir -p build && \
#     cd build && cmake .. -DCMAKE_BUILD_TYPE=Release \
#                          -DCMAKE_INSTALL_PREFIX=/opt/flashlight \
#                          -DFL_BACKEND=CUDA \
#                          -DFL_BUILD_ALL_APPS=ON \
#                          -DFL_BUILD_APP_ASR=ON \
#                          -DFL_USE_ARRAYFIRE=ON \
#                          -D FL_BUILD_PKG_RUNTIME=ON \
#                          -DFL_BUILD_PKG_SPEECH=ON \
#                          -DFL_USE_ONEDNN=OFF \
#                          -DFL_ARRAYFIRE_USE_CUDA=ON
# cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/flashlight -DFL_BACKEND=CUDA -DFL_BUILD_ALL_APPS=ON -DFL_BUILD_APP_ASR=ON -DFL_USE_ARRAYFIRE=ON -D FL_BUILD_PKG_RUNTIME=ON -DFL_BUILD_PKG_SPEECH=ON -DFL_USE_ONEDNN=OFF -DFL_ARRAYFIRE_USE_CUDA=ON
# RUN cd /root/flashlight/build && make install -j$(nproc)
